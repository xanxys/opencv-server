// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/CalibrationServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class CalibrationServerHandler : virtual public CalibrationServerIf {
 public:
	CalibrationServerHandler() {
	}

	void findChessboardCorners(DetectionResult& _return, const Image& image, const int16_t rows, const int16_t cols) {
		// Your implementation goes here
		printf("findChessboardCorners\n");
	}

	void calibrateCamera(CalibrationResult& _return, const std::vector<CalibrationPoints> & correspondences, const Vector2& image_size) {
		// Your implementation goes here
		printf("calibrateCamera\n");
	}

};

int main(int argc, char **argv) {
	int port = 9090;
	shared_ptr<CalibrationServerHandler> handler(new CalibrationServerHandler());
	shared_ptr<TProcessor> processor(new CalibrationServerProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}
